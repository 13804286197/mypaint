#!/usr/bin/env python
"Code generator, part of the build process."

class Variable:
    pass

variables = []
i = 0
for statement in open('brush.h').read().split('//%')[1:]:
    v = Variable()
    comment, declaration, trash = statement.split('\n', 2)
    v.cname = declaration.split()[-1].rstrip(';')
    fields = [s.strip() for s in comment.split('%')]
    v.name, v.flags, v.min, v.default, v.max, v.tooltip = fields
    v.i = i
    variables.append(v)
    i += 1
    print 'Parsed brush setting', v.cname

brush_set_settings = ''
brush_get_settings = ''
brush_settings_infos = ''
for v in variables:
    brush_set_settings += \
    '  if (id == %d) { b->%s = value; } else\n' % (v.i, v.cname)
    brush_get_settings += \
    '  if (id == %d) { return b->%s; } else\n' % (v.i, v.cname)
    brush_settings_infos += \
    '  { "%s", "%s", %s, %s, %s, %s, "%s" },\n' % (v.cname, v.name, v.flags, v.min, v.default, v.max, v.tooltip)

result = '''// autogenerated by generate.py, do not edit

BrushSettingInfo brush_setting_infos[] = {
''' + brush_settings_infos + '''
  { 0, 0, 0, 0, 0, 0, 0 }
};

void brush_set_setting (Brush * b, int id, float value)
{
''' + brush_set_settings + r'''
  {
    g_print ("brush_set_setting() with invalid id %d\n", id);
    g_assert (0);
  }
}

float brush_get_setting (Brush * b, int id)
{
''' + brush_get_settings + r'''
  {
    g_print ("brush_get_setting() with invalid id %d\n", id);
    g_assert (0);
    return 0;
  }
}

'''

filename = 'brush_settings.inc'
print 'Writing', filename
open(filename, 'w').write(result)
