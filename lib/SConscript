Import('env')
import sys, functools

env.Append(CPPPATH='../brushlib')

# For the record: I know that scons supports swig. But it doesn't scan for #include in the generated code.
# 
# I have given up. Scons just can't get the dependencies right with those
# code generators. Let's give scons a "normal" c++ project to dependency-scan.
if env.Execute('swig -o mypaintlib_wrap.cpp -noproxydel -python -c++ mypaintlib.i'):
    Exit(1)
env.Clean('.', 'mypaintlib_wrap.cpp')
env.Clean('.', 'mypaintlib.py')

def build_py_module(*args, **kwargs):
    if sys.platform == "win32": # there 's a better way to do this
        kwargs["SHLIBSUFFIX"]=".pyd"
    elif sys.platform == "darwin":
        kwargs["SHLIBSUFFIX"]=".so"
    else:
        pass
    return env.SharedLibrary(*args, **kwargs)

# python extension module
src = 'mypaintlib_wrap.cpp'
module = build_py_module('_mypaintlib', Split(src), SHLIBPREFIX="", LIBS="mypaint-brushlib", LIBPATH="../brushlib")

Return('module')
