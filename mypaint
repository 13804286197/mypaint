#!/usr/bin/env python

#import psyco
#psyco.full()

import gtk, sys, os
gdk = gtk.gdk

# this line gets changed by the install script
prefix = None

if prefix:
    if not prefix.startswith('/') or not os.path.exists(prefix + 'lib/mypaint/'):
        # start to guess the prefix
        if os.path.exists('/usr/lib/mypaint'):
            prefix = '/usr/'
        elif os.path.exists('/usr/local/lib/mypaint'):
            prefix = '/usr/local/'
    if not prefix.endswith('/'): prefix = prefix + '/'
    sys.path.append(prefix + 'lib/mypaint/')

try: # just for a nice error message, plus portability test
    from mydrawwidget import MyBrush
    b = MyBrush()
    b.srandom(0xf4a1)
    b.random_double()
    b.random_double()
    val = b.random_double()
    if abs(val - 0.816066731699) > 1e-10:
        print 'Warning: the pseudo random generator did not generate the expected sequence.'
        print 'You should be able to use mypaint normally, but files (stroke replays) saved'
        print 'on a different system will have a different randomness, thus look different.'
        print 'Please report this problem together with information about your system / CPU.'
        print
    assert val >= 0.0
    assert val <= 1.0
    del MyBrush
except ImportError, detail:
    print 'ImportError:', detail
    if 'cannot import name' in str(detail).lower():
        print "\nOops! Maybe something went wrong during 'make'."
        print "More likely try 'python mypaint' instead of './mypaint'.\n"
    else:
        print "\nYou need to 'make' the C modules first.\n"
    sys.exit(1)

import application

def init_input():
    "make those pressure sensitive devices working"
    pressure_devices = []
    for device in gdk.devices_list():
        if device.source in [gdk.SOURCE_PEN, gdk.SOURCE_ERASER]:
            pressure_devices.append(device)
    if pressure_devices:
        print 'Setting "screen mode" for pressure_sensitive devices:'
        for device in pressure_devices:
            print device.name
            device.set_mode(gdk.MODE_SCREEN)
    else:
        print 'No pressure sensitive devices found.'


def main():

    def usage_exit():
        print sys.argv[0], '[OPTION]... [FILENAME]'
        print 'Options:'
        print '  -c /path/to/config   use this directory instead of ~/.mypaint/'
        sys.exit(1)

    confpath = os.getenv('HOME') + '/.mypaint/'
    filename = None

    args = sys.argv[1:]
    while args:
        if args[0] == '-c':
            confpath = args[1]
            args = args[2:]
        elif args[0].startswith('-'):
            usage_exit()
        elif len(args) == 1:
            filename = args[0]
            if not os.path.isfile(filename):
                print 'File', filename, 'does not exist.'
                filename = None
            args = []

    init_input()
    app = application.Application(prefix, confpath, filename)

    # Recent gtk versions don't allow changing those menu shortcuts by
    # default. <rant>Sigh. This very useful feature used to be the
    # default behaviour even in the GIMP some time ago. I guess
    # assigning a keyboard shortcut without a complicated dialog
    # clicking marathon must have totally upset the people coming from
    # windows.</rant>
    gtksettings = gtk.settings_get_default()
    gtksettings.set_property('gtk-can-change-accels', True)

    gtk.main()

if __name__ == '__main__':
    main()

